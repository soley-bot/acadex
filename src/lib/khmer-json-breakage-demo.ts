/**
 * CRITICAL: Demonstration of Khmer JSON Parsing Issues in AI Quiz Generation
 * 
 * This file shows the EXACT problems that occur when ChatGPT generates Khmer text
 * and we try to parse it as JSON and save it to the database.
 */

import { logger } from './logger'

export class KhmerJSONBreakageDemo {
  
  /**
   * Simulates what happens when ChatGPT returns Khmer text in JSON format
   * Shows the specific Unicode and JSON parsing issues
   */
  static demonstrateJSONBreakage() {
    console.log('üö® KHMER JSON PARSING BREAKAGE DEMONSTRATION üö®')
    console.log('=' .repeat(60))
    
    // PROBLEM 1: Complex Khmer consonant clusters break JSON parsing
    console.log('\n1. CONSONANT CLUSTER ISSUES:')
    
    const problematicKhmerQuiz = {
      title: "·ûî·üí·ûö·ûú·ûè·üí·ûè·û∑·ûü·û∂·ûü·üí·ûè·üí·ûö·ûÅ·üí·ûò·üÇ·ûö", // Contains complex clusters: ·ûî·üí·ûö, ·ûè·üí·ûè·û∑, ·ûü·üí·ûè·üí·ûö
      questions: [
        {
          question: "·ûö·û∂·ûá·ûú·ûÑ·üí·ûü·ûÖ·ûª·ûÑ·ûÄ·üí·ûö·üÑ·ûô·ûö·ûî·ûü·üã·ûî·üí·ûö·ûë·üÅ·ûü·ûÄ·ûò·üí·ûñ·ûª·ûá·û∂·ûÇ·û∫·ûá·û∂·û¢·üí·ûú·û∏?", // Multiple complex clusters
          options: [
            "·ûñ·üí·ûö·üá·ûî·û∂·ûë·ûì·ûö·üÑ·ûè·üí·ûè·ûò", // ·ûñ·üí·ûö·üá cluster + other complexities
            "·ûñ·üí·ûö·üá·ûü·û∏·û†·ûì·ûª",
            "·ûñ·üí·ûö·üá·ûÄ·üÑ·ûü·ûõ·üí·ûô",
            "·ûñ·üí·ûö·üá·û¢·ûÑ·üí·ûÇ·ûò·üí·ûÖ·û∂·ûü·üã"
          ],
          answer: "·ûñ·üí·ûö·üá·ûî·û∂·ûë·ûì·ûö·üÑ·ûè·üí·ûè·ûò"
        }
      ]
    }
    
    // Try to stringify - this is where it often breaks
    try {
      const jsonString = JSON.stringify(problematicKhmerQuiz)
      console.log('‚úÖ JSON stringify succeeded')
      console.log('JSON length:', jsonString.length)
      
      // Try to parse it back - this is where it REALLY breaks
      const parsed = JSON.parse(jsonString)
      console.log('‚úÖ JSON parse succeeded')
      console.log('Parsed title:', parsed.title)
      
    } catch (error) {
      console.error('‚ùå JSON operation failed:', error)
    }
    
    // PROBLEM 2: Unicode normalization issues
    console.log('\n2. UNICODE NORMALIZATION ISSUES:')
    
    // Same text but with different Unicode compositions
    const normalizedText = "·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö"  // NFC normalized
    const decomposedText = "·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö"   // NFD decomposed (visually same, different bytes)
    
    console.log('Normalized length:', normalizedText.length)
    console.log('Decomposed length:', decomposedText.length)
    console.log('Are they equal?', normalizedText === decomposedText)
    console.log('Normalized bytes:', Array.from(normalizedText).map(c => c.charCodeAt(0)))
    console.log('Decomposed bytes:', Array.from(decomposedText).map(c => c.charCodeAt(0)))
    
    // PROBLEM 3: Database insertion issues
    console.log('\n3. DATABASE INSERTION PROBLEMS:')
    
    const exampleQuizForDB = {
      title: "·ûÄ·û∂·ûö·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö",
      questions: JSON.stringify([
        {
          question: "·û¢·ûÄ·üí·ûü·ûö·ûÅ·üí·ûò·üÇ·ûö·ûò·û∂·ûì·û¢·ûÄ·üí·ûü·ûö·ûü·üí·ûö·üà·ûî·üâ·ûª·ûì·üí·ûò·û∂·ûì?",
          options: ["·ü¢·ü£", "·ü¢·ü§", "·ü¢·ü•", "·ü¢·ü¶"],
          answer: "·ü¢·ü§"
        }
      ])
    }
    
    console.log('Quiz for DB:', exampleQuizForDB)
    console.log('Questions as JSON string length:', exampleQuizForDB.questions.length)
    
    // Simulate database constraint issues
    if (exampleQuizForDB.questions.length > 1000) {
      console.log('‚ö†Ô∏è  JSON string too long for database text field!')
    }
    
    return {
      problematicKhmerQuiz,
      normalizedText,
      decomposedText,
      exampleQuizForDB
    }
  }
  
  /**
   * Shows how our current enhanced-ai-services.ts handles (or doesn't handle) Khmer
   */
  static analyzeCurrentKhmerHandling() {
    console.log('\nüìã CURRENT KHMER HANDLING ANALYSIS:')
    console.log('=' .repeat(50))
    
    // Simulate what happens in our AI service
    console.log('\n1. AI Service Response Simulation:')
    
    // This is what ChatGPT might return for a Khmer quiz
    const chatGPTResponse = `{
      "title": "·ûÄ·û∂·ûö·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö",
      "description": "·ûò·üÅ·ûö·üÄ·ûì·û¢·üÜ·ûñ·û∏·ûú·üÅ·ûô·üí·ûô·û∂·ûÄ·ûö·ûé·üç·ûÅ·üí·ûò·üÇ·ûö ·ûì·û∑·ûÑ ·ûÄ·û∂·ûö·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûó·û∂·ûü·û∂",
      "questions": [
        {
          "question": "·û¢·ûÄ·üí·ûü·ûö·ûÅ·üí·ûò·üÇ·ûö·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûñ·û∏·û¢·ûÄ·üí·ûü·ûö·û¢·üí·ûú·û∏?",
          "type": "multiple_choice",
          "options": ["·û¢", "·ûÄ", "·ûÇ", "·ûÑ"],
          "correct_answer": "·ûÄ",
          "explanation": "·û¢·ûÄ·üí·ûü·ûö·ûÅ·üí·ûò·üÇ·ûö·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûñ·û∏·û¢·ûÄ·üí·ûü·ûö ·ûÄ ·ûä·üÇ·ûõ·ûò·û∂·ûì·ûü·üí·ûö·üà·ûá·û∂·ûî·üã·ûá·û∂·ûò·ûΩ·ûô"
        },
        {
          "question": "·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö·ûò·û∂·ûì·ûñ·üí·ûô·û∂·ûô·ûì·ûá·üí·ûö·ûª·ûõ·ûî·üâ·ûª·ûì·üí·ûò·û∂·ûì?",
          "type": "multiple_choice", 
          "options": ["·ü£·ü¢", "·ü£·ü£", "·ü£·ü§", "·ü£·ü•"],
          "correct_answer": "·ü£·ü£",
          "explanation": "·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö·ûò·û∂·ûì·ûñ·üí·ûô·û∂·ûô·ûì·ûá·üí·ûö·ûª·ûõ·ûÖ·üÜ·ûì·ûΩ·ûì ·ü£·ü£ ·ûñ·üí·ûô·û∂·ûô·ûì"
        }
      ]
    }`
    
    console.log('Raw ChatGPT response length:', chatGPTResponse.length)
    console.log('Contains Khmer characters:', /[\u1780-\u17FF]/.test(chatGPTResponse))
    
    // Test JSON parsing like our API routes do
    try {
      console.log('\n2. JSON Parsing Test:')
      const parsed = JSON.parse(chatGPTResponse)
      console.log('‚úÖ JSON parsing successful')
      console.log('Title:', parsed.title)
      console.log('Questions count:', parsed.questions?.length)
      
      // Test stringifying for database storage
      console.log('\n3. Database Storage Test:')
      const forDatabase = {
        title: parsed.title,
        description: parsed.description,
        questions: JSON.stringify(parsed.questions), // This is what we do in our API
        created_at: new Date().toISOString()
      }
      
      console.log('Database object created successfully')
      console.log('Questions JSON length:', forDatabase.questions.length)
      
      // Test parsing questions back from database
      console.log('\n4. Database Retrieval Test:')
      const retrievedQuestions = JSON.parse(forDatabase.questions)
      console.log('‚úÖ Questions parsed back from database')
      console.log('First question:', retrievedQuestions[0]?.question)
      
    } catch (error) {
      console.error('‚ùå JSON operation failed:', error)
      console.error('Error details:', {
        name: error instanceof Error ? error.name : 'Unknown',
        message: error instanceof Error ? error.message : String(error)
      })
    }
    
    return { chatGPTResponse }
  }
  
  /**
   * Shows specific edge cases that break our system
   */
  static demonstrateEdgeCases() {
    console.log('\n‚ö†Ô∏è  KHMER EDGE CASES THAT BREAK THE SYSTEM:')
    console.log('=' .repeat(55))
    
    const edgeCases = [
      {
        name: 'Complex Consonant Clusters',
        text: '·ûü·üí·ûè·üí·ûö·û∏ ·ûü·üí·ûö·ûª·ûÄ ·ûî·üí·ûö·ûë·üÅ·ûü ·ûÄ·üí·ûö·ûª·ûò ·ûü·üí·ûì·üÅ·û†·üç',
        issue: 'Multiple consonants combined with subscripts'
      },
      {
        name: 'Numeric Mixed with Khmer',
        text: '·ûò·üÅ·ûö·üÄ·ûì·ûë·û∏ ·ü°·ü¢ ·û¢·üÜ·ûñ·û∏·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö',
        issue: 'Khmer numerals mixed with text'
      },
      {
        name: 'Special Characters',
        text: '·ûü·üÜ·ûé·ûΩ·ûö·üñ "·û¢·üí·ûú·û∏·ûá·û∂·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö?" (·ûÖ·ûò·üí·ûõ·ûæ·ûô)',
        issue: 'Punctuation and quotation marks'
      },
      {
        name: 'Long Text with Multiple Clusters',
        text: '·ûî·üí·ûö·ûú·ûè·üí·ûè·û∑·ûü·û∂·ûü·üí·ûè·üí·ûö·ûì·üÉ·ûñ·üí·ûö·üá·ûö·û∂·ûá·û∂·ûé·û∂·ûÖ·ûÄ·üí·ûö·ûÄ·ûò·üí·ûñ·ûª·ûá·û∂ ·ûì·û∑·ûÑ·ûÄ·û∂·ûö·û¢·ûó·û∑·ûú·ûå·üí·ûç·ûì·üç·ûî·üí·ûö·ûá·û∂·ûí·û∑·ûî·ûè·üÅ·ûô·üí·ûô',
        issue: 'Very long text with many complex elements'
      }
    ]
    
    edgeCases.forEach((testCase, index) => {
      console.log(`\n${index + 1}. ${testCase.name}:`)
      console.log(`   Text: "${testCase.text}"`)
      console.log(`   Issue: ${testCase.issue}`)
      console.log(`   Length: ${testCase.text.length} characters`)
      console.log(`   Unicode length: ${Array.from(testCase.text).length} code points`)
      
      // Test JSON compatibility
      try {
        const testObj = { content: testCase.text }
        const jsonStr = JSON.stringify(testObj)
        const parsed = JSON.parse(jsonStr)
        console.log(`   JSON: ‚úÖ Works`)
      } catch (error) {
        console.log(`   JSON: ‚ùå Fails - ${error instanceof Error ? error.message : String(error)}`)
      }
    })
    
    return edgeCases
  }
  
  /**
   * Complete demonstration of all Khmer JSON issues
   */
  static runCompleteDemo() {
    console.log('\nüá∞üá≠ COMPLETE KHMER JSON PARSING DEMONSTRATION üá∞üá≠')
    console.log('=' .repeat(70))
    
    const results = {
      breakageDemo: this.demonstrateJSONBreakage(),
      currentHandling: this.analyzeCurrentKhmerHandling(),
      edgeCases: this.demonstrateEdgeCases()
    }
    
    console.log('\nüéØ SUMMARY OF ISSUES:')
    console.log('1. Complex consonant clusters can cause JSON parsing failures')
    console.log('2. Unicode normalization inconsistencies')
    console.log('3. Database text field length limitations')
    console.log('4. Special characters and punctuation handling')
    console.log('5. Mixed content (Khmer + numbers + Latin) issues')
    
    console.log('\nüí° SOLUTIONS NEEDED:')
    console.log('1. Pre-validate Khmer text before JSON operations')
    console.log('2. Unicode normalization (NFC) before storage')
    console.log('3. Escape special characters properly')
    console.log('4. Increase database field sizes for Khmer content')
    console.log('5. Add try-catch around all JSON operations')
    
    return results
  }
}

// Export for testing
export default KhmerJSONBreakageDemo
